// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18046
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LevenshteinDistance")]
    public partial class LevenshteinDistanceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LevenshteinDistance.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LevenshteinDistance", "In order to enter my address information\r\nAs a user from an internet portal\r\nI wa" +
                    "nt to be told suggestions about possible streets\r\neven when the text I entered i" +
                    "s not completely correct", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search a street when the name was not written correctly")]
        public virtual void SearchAStreetWhenTheNameWasNotWrittenCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search a street when the name was not written correctly", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table1.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 8
 testRunner.Given("in the repository is stored the street", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table2.AddRow(new string[] {
                        "wahnhof isator",
                        "86161"});
#line 11
 testRunner.And("the user enters the following street", ((string)(null)), table2, "And ");
#line 14
 testRunner.When("the portal search for streets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table3.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 15
 testRunner.Then("the user should have the following autocomplete suggestions", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search a street when the name is very different from the original one")]
        public virtual void SearchAStreetWhenTheNameIsVeryDifferentFromTheOriginalOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search a street when the name is very different from the original one", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table4.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 20
 testRunner.Given("in the repository is stored the street", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table5.AddRow(new string[] {
                        "wahnof iseerdor",
                        "86161"});
#line 23
 testRunner.And("the user enters the following street", ((string)(null)), table5, "And ");
#line 26
 testRunner.When("the portal search for streets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table6.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 27
 testRunner.Then("the user should not have the following autocomplete suggestions", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search a street when the text entered has less than three characters")]
        public virtual void SearchAStreetWhenTheTextEnteredHasLessThanThreeCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search a street when the text entered has less than three characters", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table7.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 32
 testRunner.Given("in the repository is stored the street", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table8.AddRow(new string[] {
                        "wa",
                        "86161"});
#line 35
 testRunner.And("the user enters the following street", ((string)(null)), table8, "And ");
#line 38
 testRunner.When("the portal search for streets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table9.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 39
 testRunner.Then("the user should not have the following autocomplete suggestions", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search a street case insensitive")]
        public virtual void SearchAStreetCaseInsensitive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search a street case insensitive", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table10.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 44
 testRunner.Given("in the repository is stored the street", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table11.AddRow(new string[] {
                        "BAHNHOF Isertor",
                        "86161"});
#line 47
 testRunner.And("the user enters the following street", ((string)(null)), table11, "And ");
#line 50
 testRunner.When("the portal search for streets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table12.AddRow(new string[] {
                        "S-Bahnhof Isartor",
                        "86161"});
#line 51
 testRunner.Then("the user should have the following autocomplete suggestions", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search a street when the name of the street contains numbers")]
        public virtual void SearchAStreetWhenTheNameOfTheStreetContainsNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search a street when the name of the street contains numbers", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table13.AddRow(new string[] {
                        "U12345 Isartor",
                        "86165"});
#line 56
 testRunner.Given("in the repository is stored the street", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table14.AddRow(new string[] {
                        "U1245",
                        "86165"});
#line 59
 testRunner.And("the user enters the following street", ((string)(null)), table14, "And ");
#line 62
 testRunner.When("the portal search for streets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table15.AddRow(new string[] {
                        "U12345 Isartor",
                        "86165"});
#line 63
 testRunner.Then("the user should have the following autocomplete suggestions", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fuzzi search a duplicated street should return just one street")]
        public virtual void FuzziSearchADuplicatedStreetShouldReturnJustOneStreet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fuzzi search a duplicated street should return just one street", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table16.AddRow(new string[] {
                        "U12345 Isartor",
                        "86165"});
            table16.AddRow(new string[] {
                        "U12345 Isartor",
                        "86165"});
#line 68
 testRunner.Given("in the repository is stored the street", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table17.AddRow(new string[] {
                        "U1245",
                        "86165"});
#line 72
 testRunner.And("the user enters the following street", ((string)(null)), table17, "And ");
#line 75
 testRunner.When("the portal search for streets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "pobox"});
            table18.AddRow(new string[] {
                        "U12345 Isartor",
                        "86165"});
#line 76
 testRunner.Then("the user should have the following autocomplete suggestions", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
